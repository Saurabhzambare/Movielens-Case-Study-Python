add2013 <- data.frame(Country=Country_Code,Life.Exp=Life_Expectancy_At_Birth_2013)
summary(add1960)
summary(add2013)
#merge the pairs of dataframes
merged1960 <- merge(std1960, add1960, by.x = "Country.Code", by.y = "Code")
#merge the pairs of dataframes
merged1960 <- merge(std1960, add1960, by.x = "Country.Code", by.y = "Code")
#merge the pairs of dataframes
merged1960 <- merge(std1960, add1960, by.x = "Country.Code", by.y = "Code")
#merge the pairs of dataframes
merged1960 <- merge(std1960, add1960, by.x = "Country.Code", by.y = "Code")
add1960 <- data.frame(Code=Country_Code,Life.Exp=Life_Expectancy_At_Birth_1960)
add2013 <- data.frame(Code=Country_Code,Life.Exp=Life_Expectancy_At_Birth_2013)
#merge the pairs of dataframes
merged1960 <- merge(std1960, add1960, by.x = "Country.Code", by.y = "Code")
merged1960 <- merge(std1960, add1960, by.x = "Country.Code", by.y = "Code")
merged2013 <- merge(std2013, add2013, by.x = "Country.Code", by.y = "Code")
merged2013
head(merged1960)
head(merged2013)
#check the new structures
str(merged1960)
str(merged2013)
library(ggplot2)
merged1960$Year <- NULL
merged2013$Year <- NULL
#visualize the 1960 dataset
qplot(data=merged1960, x=Fertility.Rate, y=Life.Exp,
colour=Region)
#visualize the 1960 dataset
qplot(data=merged1960, x=Fertility.Rate, y=Life.Exp,
colour=Region, size=I(5),alpha=I(0.6)
main = "Life Expectancy vs Fertility Rate")
#visualize the 1960 dataset
qplot(data=merged1960, x=Fertility.Rate, y=Life.Exp,
colour=Region, size=I(5),alpha=I(0.6),
main = "Life Expectancy vs Fertility Rate")
#visualize the 2013 dataset
qplot(data=merged2013, x=Fertility.Rate, y=Life.Exp,
colour=Region, size=I(5),alpha=I(0.6),
main = "Life Expectancy vs Fertility Rate")
#visualize the 1960 dataset
qplot(data=merged1960, x=Fertility.Rate, y=Life.Exp,
colour=Region, size=I(5),alpha=I(0.6),
main = "Life Expectancy vs Fertility Rate(1960)")
#visualize the 2013 dataset
qplot(data=merged2013, x=Fertility.Rate, y=Life.Exp,
colour=Region, size=I(5),alpha=I(0.6),
main = "Life Expectancy vs Fertility Rate(2013)")
BankCust <- read.csv(file.choose())
View(BankCust)
install.packages("plyr")
library(plyr)
str(BankCust)
View(BankCust)
BankCust <- rename(BankCust, c("Ã¯..age"="Age"))
View(BankCust)
max(BankCust$Age)
min(BankCust$Age)
#
BankCustNew <-
?transform
?transform
head(BankCustNew=10)
BankCustNew <- transform(BankCust, Generation=ifelse(Age<22, "Z",
ifelse(Age<41, "Y",
ifelse(Age<53, "X",
"Baby Boomers"))))
head(BankCustNew=10)
BankCustNew <- transform(BankCust, Generation=ifelse(Age<22, "Z",
ifelse(Age<41, "Y",
ifelse(Age<53, "X",
"Baby Boomers"))))
head(BankCustNew=10)
head(BankCustNew[10])
head(BankCustNew[1:10])
#
BankCustNew <- transform(BankCust, Generation=ifelse(Age<22, "Z",
ifelse(Age<41, "Y",
ifelse(Age<53, "X",
"Baby Boomers"))))
head(BankCustNew[1:10])
BankCustNew
head(BankCustNew[1:10])
str(BankCustNew)
levels(BankCustNew$Generation)
temp <- factor(BankCustNew$Generation)
levels(temp)
head(BankCustNew[1:10])
head(BankCustNew)
#table
table(BankCustNew$Generation, BankCustNew$poutcome)
#table
table(BankCustNew$Generation, BankCustNew$poutcome)
View(BankCustNew)
temp2 <- factor(BankCustNew$poutcome)
levels(temp2)
levels(temp)
Cust_Segment_Data <- c(1,1,2,2,5,4)
KmeansCluster = kmeans(Cust_Segment_Data)
setwd("C:/Users/Saurabh/Desktop/Simplilearn  First_Project")
#Importing Dataset
dataset <- read.csv(file.choose())
head(dataset)
View(dataset)
View(dataset)
str(dataset)
?name()
name(dataset)
names(dataset)
?stri_replace_all()
?is.na()
#Finding Not Available / Missing Values in Dataset
is.na(dataset)
#Finding Not Available / Missing Values in Dataset
is.na(dataset) -> a
a
length(a[a==T])
rm(a)
is.na(dataset) -> MisData
length(MisData[MisData==T])
?dmy()
#
install.packages(lubridate)
#
install.packages('lubridate')
library(lubridate)
?dmy()
dataset$Date
dmy(dataset$Date)
dmy(dataset$Date) ->dataset$Date
ymd(dataset$Date) ->dataset$Date
View(dataset)
View(dataset)
ydm(dataset$Date) ->dataset$Date
dmy(dataset$Date) ->dataset$Date
dataset <- read.csv(file.choose())
View(dataset)
View(dataset)
is.na(dataset) -> MisData
length(MisData[MisData==T])
library(lubridate)
ymd(dataset$Date) ->dataset$Date
dmy(dataset$Date) ->dataset$Date
dmy(dataset$Date) ->dataset$Date
dataset <- read.csv(file.choose())
dataset <- read.csv(file.choose())
is.na(dataset) -> MisData
length(MisData[MisData==T])
library(lubridate)
dmy(dataset$Date) ->dataset$Date
View(dataset)
View(dataset)
str(dataset)
?summary
?summarise
?summarise
?summarise()
#Extracting Monthly and Daily Ticket Count
library(dplyr)
#Extracting Monthly and Daily Ticket Count
install.packages('dplyr')
library(dplyr)
?summarise()
summarise(dataset)
?month
month(Date))
month(Date)
month(dataset)
month(dataset) <- a
monthly_count<- summarise(group_by(comcast_data,Month =as.integer(month(Date))),
Count = n())
monthly_count<- summarise(group_by(dataset,Month =as.integer(month(Date))),
Count = n())
monthly_count
daily_count<- summarise(group_by(dataset,Date))
daily_count
daily_count<- summarise(group_by(dataset,Date),Count =n())
daily_count
summarise(dataset)
monthly_count
monthly_count<-arrange(monthly_count,Month)
monthly_coun
monthly_count
monthly_count<- summarise(group_by(dataset,Month =as.integer(month(Date))),
Count = n())
monthly_count
monthly_count<-arrange(monthly_count,Month)
monthly_count
?arrange
monthly_count<-?arrange(monthly_count,dec(Month))
monthly_count
monthly_count<-?arrange(monthly_count,dec(Month))
monthly_count
monthly_count<-?arrange(monthly_count,desc(Month))
monthly_count
monthly_count<-?arrange(monthly_count,Month)
monthly_count<-arrange(monthly_count,desc(Month))
monthly_count<-arrange(monthly_count,Month)
monthly_count<-arrange(monthly_count,Month)
monthly_count<-arrange(monthly_count,Month)
monthly_count<- summarise(group_by(dataset,Month =as.integer(month(Date))),
Count = n())
daily_count<- summarise(group_by(dataset,Date),Count =n())
monthly_count<-arrange(monthly_count,Month)
library(ggplot2)
ggplot(data = monthly_count,aes(Month,Count,label = Count))
labs(title = "Monthly Ticket Count",x= "Months",y ="No. of Tickets")
+
labs(title = "Monthly Ticket Count",x= "Months",y ="No. of Tickets")
ggplot(data = monthly_count,aes(Month,Count,label = Count)
library(ggplot2)
library(ggplot2)
ggplot(data = monthly_count,aes(Month,Count,label = Count))
?aes
ggplot(data = monthly_count,aes(Month,Count,label = Count))+
geom_line()+
geom_point(size = 0.8)
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)
geom_line()+
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)
geom_line()+
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)
geom_line()
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)
geom_line()
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))
ggplot(data = monthly_count,aes(x=Month,y=Count))+
ggplot(data = monthly_count,aes(x=Month,y=Count))
library(ggplot2)
ggplot(data = monthly_count,aes(x=Month,y=Count))
ggplot(data = monthly_count,aes(x=Month,y=Count))+
geom_point(size = 0.8)
ggplot(data = monthly_count,aes(x=Month,y=Count))+
geom_point(size = 0.8)
geom_line()
ggplot(data = monthly_count,aes(x=Month,y=Count))+
geom_point(size = 0.8)+
geom_line(
ggplot(data = monthly_count,aes(x=Month,y=Count))+
geom_point(size = 0.8)+
geom_line()
geom_line()+
library(ggplot2)
ggplot(data = monthly_count,aes(x=Month,y=Count))+
geom_point(size = 0.8)+
geom_line()
ggplot(data = monthly_count,aes(x=Month,y=Count))+
geom_point(size = 0.8)+
geom_line()+
geom_text()
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)+
geom_line()+
geom_text()
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)+
geom_line()+
geom_text()+
scale_x_continuous(breaks = monthly_count$Month)+
labs(title = "Monthly Ticket Count",x= "Months",y ="No. of Tickets")
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)+
geom_line()+
geom_text()+
scale_x_continuous(breaks = monthly_count$Month)+
labs(title = "Monthly Ticket Count",x= "Months",y ="No. of Tickets")+
theme(plot.title = element_text(hjust = 0.5))
View(monthly_count)
View(monthly_count)
library(ggplot2)
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 0.8)+
geom_line()+
geom_text()+
scale_x_continuous(breaks = monthly_count$Month)+
labs(title = "Monthly Ticket Count",x= "Months",y ="No. of Tickets")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = daily_count,aes(as.POSIXct(Date),Count))+
geom_line()+
geom_point(size = 1)+
scale_x_datetime(breaks = "1 weeks",date_labels = "%d/%m")+
labs(title = "Daily Ticket Count",x= "Days",y ="No. of Tickets")+
theme(axis.text.x = element_text(angle = 75),
plot.title = element_text(hjust = 0.5))
?scale_x_continuous()
monthly_count$Month
?scale_x_datetime()
?as.POSIXct()
library(ggplot2)
ggplot(data = monthly_count,aes(x=Month,y=Count,label = Count))+
geom_point(size = 1)+
geom_line()+
geom_text()+
scale_x_continuous(breaks = monthly_count$Month)+
labs(title = "Monthly Ticket Count",x= "Months",y ="No. of Tickets")+
theme(plot.title = element_text(hjust = 0.5))
#2-Daily
ggplot(data = daily_count,aes(x=as.POSIXct(Date),y=Count))+
geom_line()+
geom_point(size = 1)+
scale_x_datetime(breaks = "1 weeks",date_labels = "%d/%m")+
labs(title = "Daily Ticket Count",x= "Days",y ="No. of Tickets")+
theme(axis.text.x = element_text(angle = 75),
plot.title = element_text(hjust = 0.5))
View(daily_count)
View(daily_count)
?contains
#Complaint Type Processing
network_tickets<- ?contains(dataset$CustomerComplaint,match = 'network',ignore.case = T)
internet_tickets<- contains(dataset$CustomerComplaint,match = 'internet',ignore.case = T)
billing_tickets<- contains(dataset$CustomerComplaint,match = 'bill',ignore.case = T)
email_tickets<- contains(dataset$CustomerComplaint,match = 'email',ignore.case = T)
charges_ticket<- contains(dataset$CustomerComplaint,match = 'charge',ignore.case = T)
library(tidyselect)
?contains
network_tickets<- contains(dataset$CustomerComplaint,match = 'network',ignore.case = T)
#Complaint Type Processing
network_tickets<- contains(dataset$Customer.Complaint,match = 'network',ignore.case = T)
internet_tickets<- contains(dataset$CustomerComplaint,match = 'internet',ignore.case = T)
billing_tickets<- contains(dataset$CustomerComplaint,match = 'bill',ignore.case = T)
email_tickets<- contains(dataset$CustomerComplaint,match = 'email',ignore.case = T)
charges_ticket<- contains(dataset$CustomerComplaint,match = 'charge',ignore.case = T)
network_tickets<- contains(dataset$Customer.Complaint,match = 'network',ignore.case = T)
internet_tickets<- contains(dataset$Customer.Complaint,match = 'internet',ignore.case = T)
billing_tickets<- contains(dataset$Customer.Complaint,match = 'bill',ignore.case = T)
email_tickets<- contains(dataset$Customer.Complaint,match = 'email',ignore.case = T)
charges_ticket<- contains(dataset$Customer.Complaint,match = 'charge',ignore.case = T)
dataset$ComplaintType[internet_tickets]<- "Internet"
dataset$ComplaintType[network_tickets]<- "Network"
dataset$ComplaintType[billing_tickets]<- "Billing"
dataset$ComplaintType[email_tickets]<- "Email"
dataset$ComplaintType[charges_ticket]<- "Charges"
dataset$ComplaintType[-c(internet_tickets,network_tickets,
billing_tickets,charges_ticket,email_tickets)]<- "Others"
View(dataset)
View(dataset)
table(dataset$ComplaintType)
speed_ticket<- contains(dataset$Customer.Complaint,match = 'speed',ignore.case = T)
dataset$ComplaintType[speed_ticket]<- "speed"
dataset$ComplaintType[-c(internet_tickets,network_tickets,
billing_tickets,charges_ticket,email_tickets,speed_ticket)]<- "Others"
table(dataset$ComplaintType)
payment_tickets<- contains(dataset$Customer.Complaint,match = 'payment',ignore.case = T)
dataset$ComplaintType[payment_tickets]<- "payment"
dataset$ComplaintType[-c(payment_tickets,network_tickets,
billing_tickets,charges_ticket,email_tickets,speed_ticket)]<- "Others"
table(dataset$ComplaintType)
service_ticket<- contains(dataset$Customer.Complaint,match = 'service',ignore.case = T)
dataset$ComplaintType[service_tickets]<- "service"
dataset$ComplaintType[service_ticket]<- "service"
dataset$ComplaintType[-c(payment_tickets,network_tickets,
billing_tickets,charges_ticket,
email_tickets,speed_ticket,
service_ticket)]<- "Others"
table(dataset$ComplaintType)
open_complaints<- (dataset$Status == "Open"| dataset$Status =="Pending")
closed_complaints<-(dataset$Status == "Closed"| dataset$Status =="Solved")
dataset$ComplaintStatus[ open_complaints]<-"Open"
dataset$ComplaintStatus[closed_complaints]<- "Closed"
dataset<- group_by(dataset,State,ComplaintStatus)
View(dataset)
View(dataset)
chart_data<- summarise(dataset,Count = n())
chart_data
?group_by
ggplot(as.data.frame(chart_data) ,mapping = aes(State,Count))+
geom_col(aes(fill = ComplaintStatus),width = 0.95)+
theme(axis.text.x = element_text(angle = 90),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
title = element_text(size = 16,colour = "#0073C2FF"),
plot.title = element_text(hjust =  0.5))+
labs(title = "Ticket Status Stacked Bar Chart ",
x = "States",y = "No of Tickets",
fill= "Status")
chart_data%>%
filter(ComplaintStatus == "Open")->
open_complaints
open_complaints[open_complaints$Count == max(open_complaints$Count),c(1,3)]
open_complaints[open_complaints$Count == max(open_complaints$Count)]
,c(1,3)
open_complaints[open_complaints$Count == max(open_complaints$Count),c(1,3)]
open_complaints[open_complaints$Count == max(open_complaints$Count),c(1,4)]
open_complaints[open_complaints$Count == max(open_complaints$Count),c(1,3)]
open_complaints
resolved_data <- group_by(dataset,ComplaintStatus)
total_resloved<- summarise(resolved_data ,percentage =(n()/nrow(resolved_data)))
resolved_data <- group_by(dataset,ReceivedVia,ComplaintStatus)
Category_resloved<- summarise(resolved_data ,percentage =(n()/nrow(resolved_data)))
resolved_data <- group_by(dataset,ComplaintStatus)
total_resloved<- summarise(resolved_data ,percentage =(n()/nrow(resolved_data)))
resolved_data <- group_by(dataset,ReceivedVia,ComplaintStatus)
resolved_data
total_resloved
Category_resloved<- summarise(resolved_data ,percentage =(n()/nrow(resolved_data)))
Category_resloved
par(mfrow = c(1,2))
total<-ggplot(total_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
category<-ggplot(Category_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(ReceivedVia,"-",round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggarrange(total,category,nrow = 1, ncol = 2)
library(ggpubr)
#Ploting Pie Chart for Total Resolved Vs Category Resolved
install.packages("ggpubr")
library(ggpubr)
par(mfrow = c(1,2))
total<-ggplot(total_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
# Pie Chart for Category wise Ticket Status
category<-ggplot(Category_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(ReceivedVia,"-",round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggarrange(total,category,nrow = 1, ncol = 2)
par(mfrow = c(1,2))
total<-ggplot(total_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
category<-ggplot(Category_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(ReceivedVia,"-",round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggarrange(total,category,nrow = 1, ncol = 2)
par(mfrow = c(1,2))
total<-ggplot(total_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
par(mfrow = c(1,2))
total<-ggplot(total_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
total<-ggplot(total_resloved,
aes(x= "",y =percentage,fill = ComplaintStatus))
par(mfrow = c(1,2))
total<-ggplot(total_resloved,aes(x= "",y =percentage,fill = ComplaintStatus))+
geom_bar(stat = "identity",width = 1)+
coord_polar("y",start = 0)+
geom_text(aes(label = paste0(round(percentage*100),"%")),
position = position_stack(vjust = 0.5))+
labs(x = NULL,y = NULL,fill = NULL)+
theme_classic()+theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
install.packages("ggpubr")
